#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'dockrails'

program :name, 'dockrails'
program :version, Dockrails::VERSION
program :description, 'CLI to Generate and Run a Rails environment with Docker'
program :help_formatter, Commander::HelpFormatter::TerminalCompact
program :help_paging, false

default_command :help

command :init do |c|
  c.syntax = 'dockrails init'
  c.summary = 'Initialize your Rails Docker environment'
  c.description = ''
  c.example 'description', 'dockrails init'
  c.action do |args, options|

    existing_files = ["Dockerfile", "docker-compose.yml", "docker-sync.yml"].map { |file| File.exist?(file) }
    if existing_files.include?(true)
      say "<%= color 'We detected an existing Docker install in this folder', YELLOW %>"
      answer = agree "<%= color 'Do you want to continue and override it? (yes|no)', BOLD %>"
      exit if !answer
    end

    rails_app = ask "\n<%= color 'Type the name of your Rails App folder', BOLD %>"
    if !system("find #{rails_app} > /dev/null")
      say "\n<%= color 'Unable to find your Rails application folder in the current path, please try again', RED %>"
      say "<%= color 'If you want to create a new Rails app: rails new my_app -B -d postgresql', UNDERLINE %>"
      exit
    end

    generate = Dockrails::Generate.new(app_path: rails_app)

    (generate.check_system_requirements).each do |k,v|
      if v == false
        say "\n<%= color 'Please install #{k} in order to continue', RED%>"
        exit
      end
    end

    generate.configure
    generate.create_folders
    generate.create_dockerfile
    generate.create_start_script
    generate.create_docker_compose
    generate.create_docker_sync

    say "\n<%= color 'Successful dockerization!
Please take a look at the different files generated:
- Dockerfile
- docker-compose.yml
- docker-sync.yml', GREEN%>"

    say "\nUpdate your \"database.yml\" file:
development:
  <<: *default
  database: <%%= ENV['DB_USER'] %>
  username: <%%= ENV['DB_USER'] %>
  password: <%%= ENV['DB_PASSWORD'] %>
  host: db"

  say "\nStart your dockerized Rails Environement: dockrails start"
  say "Familiarize yourself with the different commands: dockrails --help"
  end
end

command :start do |c|
  c.syntax = 'dockrails start'
  c.summary = 'Start the docker containers'
  c.description = ''
  c.example 'description', 'dockrails start'
  c.action do |args, options|
    system("docker-sync start ; docker-compose up")
  end
end

command :clean do |c|
  c.syntax = 'dockrails clean'
  c.summary = 'Stop the containers'
  c.description = ''
  c.example 'description', 'dockrails clean'
  c.action do |args, options|
    system("docker-compose stop ; docker-sync clean")
  end
end
alias_command :stop, :'clean'

command :build do |c|
  c.syntax = 'dockrails build'
  c.summary = 'Build or rebuild the services'
  c.description = ''
  c.example 'description', 'dockrails build'
  c.action do |args, options|
    system("docker-compose build")
  end
end

command :logs do |c|
  c.syntax = 'dockrails logs [container]'
  c.summary = 'Access containers logs'
  c.description = ''
  c.example 'description', 'dockrails logs web'
  c.action do |args, options|
    if args.size < 1
      system("docker-compose logs --tail=20 -f")
    else
      system("docker-compose logs --tail=20 -f #{args.join(" ")}")
    end
  end
end

command :run do |c|
  c.syntax = 'dockrails run [container] [command]'
  c.summary = 'Run a command on a specific container'
  c.description = ''
  c.example 'description', 'dockrails run [web|job|db|redis] bundle install'
  c.action do |args, options|
    if args.size < 2
      say "\n<%= color 'Please specify a container and command to run, ex: dockrails run web bundle install', RED%>"
    else
      system("docker-compose run #{args.join(" ")}")
    end
  end
end

command :restart do |c|
  c.syntax = 'dockrails restart [container]'
  c.summary = 'Restart a specific container'
  c.description = ''
  c.example 'description', 'dockrails restart web'
  c.action do |args, options|
    if args.size < 1
      say "\n<%= color 'Please specify a container, ex: dockrails restart web', RED%>"
    else
      system("docker-compose restart #{args.join(" ")}")
    end
  end
end

command :attach do |c|
  c.syntax = 'dockrails attach [container]'
  c.summary = 'Attach TTY to a specific container (usefull for ByeBug or Pry)'
  c.description = ''
  c.example 'description', 'dockrails attach web'
  c.action do |args, options|
    if args.size < 1
      say "\n<%= color 'Please specify a container, ex: dockrails attach web', RED%>"
    else
      system("docker attach --detach-keys ctrl-c $(docker-compose ps -q #{args[0]})")
    end
  end
end

command :update do |c|
  c.syntax = 'dockrails update'
  c.summary = 'Update to latest Dockrails version'
  c.description = ''
  c.example 'description', 'dockrails update'
  c.action do |args, options|
    system("gem update dockrails")
  end
end
